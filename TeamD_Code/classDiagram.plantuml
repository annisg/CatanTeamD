@startuml
'Getters, setters and some other methods are excluded for simplicity'

package model
{
    class CandidateRoadFinder
    {
        +CandidateRoadFinder(board: GameMap)
        ~getCandidateRoadFromEdge(edge: Edge): CandidateRoad
        ~edgeRecurse(edge: Edge, visitedEdges: Edge[*], visitedIntersections: Intersection[*]): CandidateRoad
        -intersectionRecurse(intersection: Intersection, visitedEdges: Edge[*], visitedIntersections: Intersection[*]): CandidateRoad
        -edgeIsVisitable(edge: Edge, visitedEdges: Edge[*], originalColor: PlayerColor): boolean
        -intersectionNotBlocked(intersection: Intersection, originalColor: PlayerColor): boolean
    }
    CandidateRoadFinder --> GameMap: board
    CandidateRoadFinder --> Edge
    CandidateRoadFinder --> Intersection

    abstract class DevelopmentCard
    {

    }

    class DevelopmentDeck
    {

    }

    class EdgeMap
    {

    }

    class GameMap
    {

    }

    class GenericPort
    {

    }

    class Hex
    {

    }

    class HexMap
    {

    }

    class Intersection
    {

    }

    class IntersectionMap
    {

    }

    class LargestArmy
    {

    }

    class LongestRoad
    {

    }

    class MapPosition
    {

    }

    class PieceBuilder
    {

    }

    class Player
    {

    }

    class PlayerColor
    {

    }

    interface Port
    {

    }

    class PortMap
    {

    }

    class PropertyPlacer
    {

    }

    class ResourceProducer
    {

    }

    class Robber
    {

    }

    class SpecificPort
    {

    }

    class TurnTracker
    {

    }

    class VictoryPointCalculator
    {

    }
}

package control
{
    class BuildingHandler
    {
        +BuildingHandler(game: CatanGame, builder: PieceBuilder, handler: InputHandler)
        ~placeInitialSettlement(point: Point): void
        ~placeInitialRoadAtClosestEdge(point: Point): void
        ~placeInitialSettlementRound2(point: Point): void
        +placeSettlement(point: Point): void
        +canPlaceSettlement(hasNotRolled: boolean): boolean
        +placeCity(point: Point): void
        +canPlaceCity((hasNotRolled: boolean): boolean
        +placeRoad(point: Point, chargeResources: boolean): void
        +canPlaceRoad((hasNotRolled: boolean): boolean
        +buyDevelopmentCard((hasNotRolled: boolean): void
        +canBuyDevCard((hasNotRolled: boolean): boolean
    }
    BuildingHandler --> CatanGame: catanGame
    BuildingHandler --> PieceBuilder: itemBuilder
    BuildingHandler --> InputHandler: handler

    class CatanGame
    {
        ~initialRound: int
        ~showAllPlayer: boolean
        -isFogOfWar: boolean
        +CatanGame()
        ~startGame(): void
        +makeBoard(state: GameStartState, numPlaers: int, gamemode: GameMode, isDebug: boolean): void
        +advancedInitialPlacement(): void
        +advancedInitialPlacementOneTurn(): void
        +advancedInitialPlacementRoundTwoOneTurn(): void
        -customHexPlacement(): void
        +setupModelFrame(gameFrame: JFrame): void
        +drawScreen(): void
        +drawMap(): void
        +justDrawProperty(): void
        +drawPlayers(): void
        +drawSpecialCards(): void
        +endTurn(): void
    }
    CatanGame --> GameBoard: gui
    CatanGame --> InputComponenet: input
    CatanGame --> GameMap: model
    CatanGame --> HexPlacer: hexesAndHexNumPlacer
    CatanGame --> PlayerPlacer: playerPlacer
    CatanGame --> TurnTracker: turnTracker
    CatanGame --> GameOptionSelector: options
    CatanGame --> MaritimeTradeManager: maritimeTradeManager
    CatanGame --> InputHandler: inputHandler
    CatanGame --> VictoryPointCalculator: pointCalculator
    CatanGame --> LongestRoad
    CatanGame --> LargestArmy
    CatanGame --> PieceBuilder
    CatanGame --> PropertyPlacer
    CatanGame --> DevelopmentDeck

    class HexPlacer
    {
        -{static}height: int
        -{static}heightOffset: int
        -{static}widthOffset: int
        -{static}leftMin: int
        +HexPlacer(hexes: HexMap)
        +getAllDrawables(): Drawable[*]
        ~getHexDrawable(hexObject: Hex, row: int, col: int): HexGUI
        ~getHexDrawable(hexObject: Hex, row: int, col: int): HexNumGUI
        +{static}calculatePosition(row: int, col: int): int[*]
    }
    HexPlacer --> HexMap: hexes
    HexPlacer --> Hex
    HexPlacer --> HexGUI
    HexPlacer --> HexNumGUI

    'what to do about function variables?'
    class InputHandler
    {
        -possibleIntersectionRows: int[12]
        -possibleIntersectionCols: int[6]
        -possibleEdgeRows: int[11]
        -possibleEdgeCols: int[10]
        -possibleHexRows: int[5]
        -possibleHexCols: int[5]
        -possibleDevCards: Object[5]
        ~hasNotRolled: boolean
        ~orderedResourceNumbers: int[*]
        -possibleDevCardNames: String[*]
        -hexPlacementNumbers: int[*]
        -orderedResources: Resource[*]
        -hexPlacementResources: Resource[*]
        +InputHandler(resourceProducer: ResourceProducer, game: CatanGame, builder: PieceBuilder)
        +selectCustomHexPlacement(availableResources: Resources[*], availableNumbers: int[*]): void
        ~buildCustomSelectors(availableResources: Resource[*], availableNumbers: int[*]): void
        ~applyCustomResourceNumber(currentResourceNumber: int)
        ~applyCustomHexResource(currentResource: Resource)
        ~buildResourceNumberSelector(availableNumbers: int[*]): Select1Frame
        ~buildResourceSelector(availableResources: Resource[*]): Select1Frame
        ~buildNewSelect1Frame(displayStrings: String[*], underlyingObjs: Object[*]): Select1Frame
        +buyDevelopmentCard(): void
        +selectAndUseDevCard(): void
        ~playDevelopmentCard(selected: Class): void
        -promptForStealingAllOfResource(): void
        -stealAllOfResource(resource: Resource): void
        +tryToROllDice(): void
        +discardCardsForEveryPlayer(): void
        +tradeWithPlayer(): void
        +rollDice(): int
        -rolledSeven(): void
        -moveRobber(): void
        ~selectPlayerToStealFromAtMapPosition(mapPosition: MapPosition): void
        +isRobberTurn(numRolled: int): boolean
        +produceResources((numRolled: int): void
        -stealFromPlayer(selectedPlayerColor: PlayerColor): void
        -offerPlayerTwoFreeRoads(): void
        -offerPlayerTwoFreeResources(): void
        -giveResourceToCurrentPlayer(resource: Resource): void
        ~updateRobberPositionOnBoard(mousePosition: Point): void
        +endTurn(): void
        +cheatResources(): void
    }
    InputHandler --> Select1Frame: devCardSelector, resourceNumberSelector, resourceSelector, resourceSelector2
    InputHandler --> Select2Frame: optionalIntersectionSelector, optionalEdgeSelector, mandatoryIntersectionSelector, mandatoryEdgeSelector, hexSelector
    InputHandler --> BuildingHandler: propertyBuilder
    InputHandler --> ResourceProducer: resourceProducer
    InputHandler --> CatanGame: catanGame
    InputHandler --> PieceBuilder

    class MaritimeTradeManager
    {
        +{static} DEFAULT_TRADE_COST: int
        +{static} GENERIC_TRADE_COST: int
        +{static} SPECIAL_TRADE_COST: int
        -soldResource: Resource
        -boughtResource: Resource
        +MaritimeTradeManager(inputHandler: InputHandler, catanGame: CatanGame)
        +trade(): void
        ~sellResource(resource: Resource): void
        ~buyResource((resource: Resource): void
        ~tradeViaPort(portType: PortSelector.PortTypes): void
        ~exchangeResourcesWithBand(tradeCost: int): void
    }
    MaritimeTradeManager --> InputHandler: inputHandler
    MaritimeTradeManager --> CatanGame: catanGame
    MaritimeTradeManager --> ResourceSelector: sellingResourceSelector, buyingResourceSelector
    MaritimeTradeManager --> PortSelector: portSelector

    class PlayerPlacer
    {
        -xPlayerBackground: int
        -yPlayerBackground: int
        -playerBackgroundWidth: int
        -playerBackgroundHeight: int
        ~numberOfPlayers: int
        -colorConverter: ObjectToColorConverter
        +PlayerPlacer(turnTracker: TurnTracker)
        +refreshPlayerNumber(): void
        +getCurrentPlayerGUI: Drawable[*]
        +getAllPlayerGUIs: Drawable[*]
        +getOtherPlayerGUIs(): Drawable[*]
        -getAllNonDesertResourceMap(player: Player): HashMap<Resource, int>
        +getDevelopmentCardMap(player: Player): HashMap<String, int>
        +getDevelopmentCardMapAmount(player: Player): HashMap<String, int>
    }
    PlayerPlacer --> turnTracker: turnTracker
    PlayerPlacer --> Player
}
@enduml